# Full Stack Docker Compose Configuration
# Complete microservices deployment with all infrastructure components

version: '3.8'

services:
  # ===========================================
  # API GATEWAY
  # ===========================================
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kongpass
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - services_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:3.4
    container_name: kong-migration
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
    networks:
      - services_network
    restart: on-failure

  kong:
    image: kong:3.4
    container_name: kong
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
    ports:
      - "8000:8000"  # Proxy port
      - "8443:8443"  # Proxy SSL port
      - "8001:8001"  # Admin API
      - "8444:8444"  # Admin API SSL
    volumes:
      - ./api-gateway/kong.yml:/opt/kong/kong.yml:ro
    networks:
      - services_network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # IDENTITY SERVICE (Port 8001)
  # ===========================================
  identity-service-db:
    image: postgres:17
    container_name: identity-service-db
    environment:
      POSTGRES_DB: identity_service
      POSTGRES_USER: identity_user
      POSTGRES_PASSWORD: identity_pass
    volumes:
      - identity_db_data:/var/lib/postgresql/data
    networks:
      - services_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U identity_user -d identity_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  identity-service-redis:
    image: redis:7-alpine
    container_name: identity-service-redis
    volumes:
      - identity_redis_data:/data
    networks:
      - services_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    container_name: identity-service
    ports:
      - "8011:8001"  # Mapped to avoid conflict with Kong admin
    environment:
      - DATABASE_URL=postgresql://identity_user:identity_pass@identity-service-db:5432/identity_service
      - REDIS_URL=redis://identity-service-redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-jwt-secret}
      - SERVICE_NAME=identity-service
      - SERVICE_PORT=8001
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      identity-service-db:
        condition: service_healthy
      identity-service-redis:
        condition: service_started
    volumes:
      - ./identity-service:/app
    networks:
      - services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # COMMUNICATION SERVICE (Port 8002)
  # ===========================================
  communication-service-db:
    image: postgres:17
    container_name: communication-service-db
    environment:
      POSTGRES_DB: communication_service
      POSTGRES_USER: comm_user
      POSTGRES_PASSWORD: comm_pass
    volumes:
      - communication_db_data:/var/lib/postgresql/data
    networks:
      - services_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U comm_user -d communication_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  communication-service-redis:
    image: redis:7-alpine
    container_name: communication-service-redis
    volumes:
      - communication_redis_data:/data
    networks:
      - services_network
    command: redis-server --appendonly yes

  communication-service:
    build:
      context: ./communication-service
      dockerfile: Dockerfile
    container_name: communication-service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://comm_user:comm_pass@communication-service-db:5432/communication_service
      - REDIS_URL=redis://communication-service-redis:6379/0
      - IDENTITY_SERVICE_URL=http://identity-service:8001
      - SERVICE_NAME=communication-service
      - SERVICE_PORT=8002
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    depends_on:
      communication-service-db:
        condition: service_healthy
      communication-service-redis:
        condition: service_started
      identity-service:
        condition: service_healthy
    volumes:
      - ./communication-service:/app
    networks:
      - services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # CONTENT SERVICE (Port 8003)
  # ===========================================
  content-service-db:
    image: postgres:17
    container_name: content-service-db
    environment:
      POSTGRES_DB: content_service
      POSTGRES_USER: content_user
      POSTGRES_PASSWORD: content_pass
    volumes:
      - content_db_data:/var/lib/postgresql/data
    networks:
      - services_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U content_user -d content_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  content-service-redis:
    image: redis:7-alpine
    container_name: content-service-redis
    volumes:
      - content_redis_data:/data
    networks:
      - services_network
    command: redis-server --appendonly yes

  content-service-minio:
    image: minio/minio:latest
    container_name: content-service-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - content_minio_data:/data
    networks:
      - services_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  content-service:
    build:
      context: ./content-service
      dockerfile: Dockerfile
    container_name: content-service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://content_user:content_pass@content-service-db:5432/content_service
      - REDIS_URL=redis://content-service-redis:6379/0
      - IDENTITY_SERVICE_URL=http://identity-service:8001
      - MINIO_URL=http://content-service-minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - SERVICE_NAME=content-service
      - SERVICE_PORT=8003
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      content-service-db:
        condition: service_healthy
      content-service-redis:
        condition: service_started
      content-service-minio:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    volumes:
      - ./content-service:/app
    networks:
      - services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # WORKFLOW INTELLIGENCE SERVICE (Port 8005)
  # ===========================================
  workflow-service-db:
    image: postgres:17
    container_name: workflow-service-db
    environment:
      POSTGRES_DB: workflow_service
      POSTGRES_USER: workflow_user
      POSTGRES_PASSWORD: workflow_pass
    volumes:
      - workflow_db_data:/var/lib/postgresql/data
    networks:
      - services_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workflow_user -d workflow_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  workflow-service-redis:
    image: redis:7-alpine
    container_name: workflow-service-redis
    volumes:
      - workflow_redis_data:/data
    networks:
      - services_network
    command: redis-server --appendonly yes

  workflow-intelligence-service:
    build:
      context: ./workflow-intelligence-service
      dockerfile: Dockerfile
    container_name: workflow-intelligence-service
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://workflow_user:workflow_pass@workflow-service-db:5432/workflow_service
      - REDIS_URL=redis://workflow-service-redis:6379/0
      - IDENTITY_SERVICE_URL=http://identity-service:8001
      - COMMUNICATION_SERVICE_URL=http://communication-service:8002
      - SERVICE_NAME=workflow-intelligence-service
      - SERVICE_PORT=8005
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      workflow-service-db:
        condition: service_healthy
      workflow-service-redis:
        condition: service_started
      identity-service:
        condition: service_healthy
    volumes:
      - ./workflow-intelligence-service:/app
    networks:
      - services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MESSAGE QUEUE (Kafka)
  # ===========================================
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - services_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - services_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===========================================
  # SERVICE DISCOVERY (Consul)
  # ===========================================
  consul:
    image: consul:latest
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    volumes:
      - consul_data:/consul/data
    networks:
      - services_network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  # Kong volumes
  kong_db_data:
  
  # Identity Service volumes
  identity_db_data:
  identity_redis_data:
  
  # Communication Service volumes
  communication_db_data:
  communication_redis_data:
  
  # Content Service volumes
  content_db_data:
  content_redis_data:
  content_minio_data:
  
  # Workflow Service volumes
  workflow_db_data:
  workflow_redis_data:
  
  # Infrastructure volumes
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  consul_data:

networks:
  services_network:
    driver: bridge
    name: services_network