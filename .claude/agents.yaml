# Claude Agent Configuration
# Simplified, domain-agnostic agent definitions for enterprise SaaS platform

agents:
  # Core Service Agents - One per microservice
  ag-backend:
    name: "Django Backend Agent"
    icon: "üîß"
    description: "Django core business service specialist for enterprise data models, Django Ninja REST APIs, PostgreSQL management, and integration with 4 microservices via API Gateway"
    working_dir: "backend"
    responsibilities:
      - Django application development with enterprise patterns
      - PostgreSQL database models, migrations, and complex queries
      - Django Ninja REST API endpoints for frontend consumption
      - Core business logic implementation and service integration
      - API client integration with identity, communication, content, and workflow services
      - Backend testing with pytest and microservices mocking
      - Data aggregation from multiple microservices for unified frontend APIs
    commands:
      - "python manage.py runserver"
      - "python manage.py migrate"
      - "python manage.py test"

  ag-frontend:
    name: "React Frontend Agent"
    icon: "üé®"
    description: "React TypeScript frontend specialist for enterprise UI/UX, API integration with Django backend and 4 microservices, state management, and responsive design with Tailwind CSS"
    working_dir: "frontend"
    responsibilities:
      - React TypeScript component development with enterprise design patterns
      - API integration with Django backend and microservices (identity, communication, content, workflow)
      - State management with Redux Toolkit and React Query for API caching
      - Frontend routing and authentication-protected routes
      - Responsive UI/UX with Tailwind CSS and component libraries
      - Real-time features integration (WebSocket, notifications)
      - Frontend testing with Jest, React Testing Library, and API mocking
    commands:
      - "npm run dev"
      - "npm run build"
      - "npm test"

  ag-identity:
    name: "Identity Service Agent"
    icon: "üîê"
    description: "FastAPI authentication microservice specialist for JWT tokens, MFA, user management, RBAC, published API design, OpenAPI specification, and service unit testing"
    working_dir: "services/identity-service"
    responsibilities:
      - FastAPI authentication endpoints and JWT token validation logic
      - User and organization management with PostgreSQL integration
      - Multi-factor authentication (email, SMS, TOTP) service implementation
      - Role-based access control (RBAC) and permissions API development
      - Published API contract design and OpenAPI specification for /auth/* endpoints
      - Service unit testing with pytest and authentication flow validation
      - API endpoint documentation and example responses for frontend/inter-service consumption
      - Service-level error handling and response standardization
    commands:
      - "python main.py"
      - "pytest tests/"

  ag-communication:
    name: "Communication Service Agent"
    icon: "üìß"
    description: "FastAPI communication microservice specialist for email notifications, SMS messaging, WebSocket real-time features, published API design, and service unit testing"
    working_dir: "services/communication-service"
    responsibilities:
      - FastAPI notification endpoints for email and SMS delivery implementation
      - WebSocket implementation for real-time chat and notifications
      - Message queue integration (Celery/Redis) for async communication handling
      - Notification templates and personalization engine development
      - Published API contract design and OpenAPI specification for /notifications/* and /messaging/* endpoints
      - Service unit testing with pytest and notification delivery validation
      - API endpoint documentation and example responses for frontend/inter-service consumption
      - Service-level error handling and delivery status standardization
    commands:
      - "python main.py"

  ag-content:
    name: "Content Service Agent"
    icon: "üìù"
    description: "FastAPI content microservice specialist for document management, file processing, search indexing, media handling, published API design, and service unit testing"
    working_dir: "services/content-service"
    responsibilities:
      - FastAPI endpoints for file upload/download and document management implementation
      - Document versioning and metadata management with PostgreSQL integration
      - Content search and indexing (Elasticsearch integration) service logic
      - Media processing (images, PDFs, OCR) and format conversion handling
      - Storage optimization and cloud storage integration development
      - Published API contract design and OpenAPI specification for /documents/* and /files/* endpoints
      - Service unit testing with pytest and file processing validation
      - API endpoint documentation and example responses for frontend/inter-service consumption
      - Service-level error handling and file operation status standardization
    commands:
      - "python main.py"

  ag-workflow:
    name: "Workflow Intelligence Agent"
    icon: "üß†"
    description: "FastAPI workflow microservice specialist for business process automation, AI/ML integration, task orchestration, event-driven workflows, published API design, and service unit testing"
    working_dir: "services/workflow-intelligence-service"
    responsibilities:
      - FastAPI endpoints for workflow definition and execution management implementation
      - Business process automation and task orchestration engine development
      - AI/ML workflow integration (OpenAI, Anthropic) and model management logic
      - Event-driven workflows with message queue integration handling
      - Process monitoring, analytics, and performance metrics collection
      - Published API contract design and OpenAPI specification for /workflows/* and /automation/* endpoints
      - Service unit testing with pytest and workflow execution validation
      - API endpoint documentation and example responses for frontend/inter-service consumption
      - Service-level error handling and workflow status standardization
    commands:
      - "python main.py"

  # Infrastructure & Coordination Agents
  ag-infrastructure:
    name: "Infrastructure Agent"
    icon: "üöÄ"
    description: "Docker containerization and Kubernetes deployment specialist for 4-microservices architecture with Kong API Gateway, multi-container orchestration, service mesh, and production deployment automation"
    working_dir: "infrastructure"
    responsibilities:
      - Multi-container Docker orchestration for 4 FastAPI microservices + Kong API Gateway + Django backend + React frontend
      - Docker Compose configuration with service dependencies, networking, and health checks
      - Kubernetes manifests for microservices deployment with service discovery and load balancing
      - Kong API Gateway containerization and routing configuration
      - PostgreSQL multi-database setup for microservices data isolation
      - Redis container orchestration for caching and message queuing
      - Container networking and inter-service communication setup
      - Environment variable management across all services and containers
      - Production deployment automation with CI/CD pipelines for microservices
      - Container monitoring, logging aggregation, and distributed tracing setup
      - Docker image optimization and multi-stage builds for each service
    commands:
      - "docker-compose up --build"
      - "docker-compose -f docker-compose.prod.yml up -d"
      - "kubectl apply -f k8s/"
      - "docker-compose logs -f [service-name]"
      - "docker system prune -f"
      - "terraform apply -var-file=microservices.tfvars"

  ag-coordinator:
    name: "Services Coordinator Agent"
    icon: "üéØ"
    description: "API Gateway, microservices coordination, and integration testing specialist for Kong configuration, API contract validation, published API testing, frontend API aggregation, and inter-service communication orchestration"
    working_dir: "services"
    responsibilities:
      - Kong API Gateway configuration and routing for 4 microservices
      - API contract testing and OpenAPI specification validation across all services
      - Published API integration testing for frontend consumption endpoints
      - Inter-service API contract testing and communication validation
      - Frontend API aggregation testing and unified endpoint validation
      - End-to-end testing workflows across microservices architecture
      - API versioning testing and backward compatibility validation
      - Cross-service authentication and authorization flow testing
      - Service health monitoring, distributed tracing, and API performance testing
      - Load balancing and rate limiting policy testing across microservices
      - Contract-driven development coordination and API-first testing strategy
    commands:
      - "docker-compose up"
      - "pytest services/tests/integration/"
      - "newman run postman_collection.json"
      - "spectral lint services/*/openapi.yaml"
      - "curl -f http://localhost:8000/health"

  # Quality & Compliance Agents
  ag-security:
    name: "Security & Compliance Agent"
    icon: "üîí"
    description: "Security audits, compliance, vulnerability management"
    working_dir: "."
    responsibilities:
      - Security vulnerability scanning
      - Compliance framework implementation
      - Audit trail management
      - Data privacy enforcement
      - Security best practices
    commands:
      - "bandit -r ."
      - "safety check"

  ag-reviewer:
    name: "Code Review Agent"
    icon: "üëÄ"
    description: "Code quality, PR reviews, best practices"
    working_dir: "."
    responsibilities:
      - Pull request reviews
      - Code quality assessment
      - Best practices enforcement
      - Performance optimization
      - Documentation quality
    commands:
      - "git diff"
      - "pytest --cov"

  ag-techlead:
    name: "Technical Lead Agent"
    icon: "üéØ"
    description: "Technical leadership specialist for architectural decision-making, cross-service design patterns, research analysis validation, technology evaluation, and strategic technical planning with critical thinking for complex architectural challenges"
    working_dir: "."
    responsibilities:
      - Architectural Decision Records (ADRs) creation and strategic technical documentation
      - Cross-service design patterns standardization and microservices architecture evolution
      - Research analysis and validation - critically evaluate external research for project fit
      - Technology stack evaluation and selection with risk-benefit analysis
      - Technical debt identification, prioritization, and resolution strategies
      - Performance and scalability architecture reviews across all microservices
      - Development process optimization and engineering best practices establishment
      - Technical risk assessment and mitigation planning with scenario analysis
      - Sprint planning and complex technical task breakdown coordination
      - Code review coordination with ag-reviewer for architectural compliance
      - Technical mentorship through documentation and standards enforcement
      - Inter-service communication patterns and API design standards
      - Challenge architectural proposals with critical analysis to ensure optimal solutions
      - Research digest analysis - synthesize complex technical research into actionable insights
      - Technology roadmap planning and strategic technical direction
    commands:
      - "make architecture-review"
      - "python scripts/tech-debt-analyzer.py"
      - "npm run dependency-audit"
      - "spectral lint docs/architecture/adr/*.yaml"
      - "pytest tests/architecture/"

  ag-surgical-product-manager:
    name: "Surgical Product Manager Agent"
    icon: "üè•"
    description: "Product management specialist for surgical practice management SaaS targeting the French healthcare market, with expertise in go-to-market strategy, customer segmentation, competitive analysis, and value proposition development"
    working_dir: "docs/products/project-medical-hub"
    responsibilities:
      - Product strategy and roadmap development for surgical specialties
      - Market analysis and competitive positioning in French healthcare market
      - Customer segmentation strategy (hospitals, clinics, individual practices)
      - Go-to-market planning and pricing models for different customer segments
      - Value proposition design using customer jobs, pains, and gains framework
      - Partnership development with medical societies (SFC, SOFCOT, AFC)
      - AI integration strategy for surgical workflow optimization
      - Financial modeling with focus on CAC, LTV, churn, MRR metrics
      - Regulatory compliance understanding (RGPD, HAS, CNIL)
      - Feature prioritization based on ROI and customer willingness to pay
      - MVP strategy development for rapid market validation
      - Proof-of-concept and pilot program design
    commands:
      - "cd docs/products/project-medical-hub"
      - "ls -la"

# Agent interaction rules
rules:
  separation_of_concerns:
    - Each agent manages only its designated service/domain
    - Cross-service changes require coordination through Services Coordinator
    - Infrastructure changes go through Infrastructure Agent
    
  communication_patterns:
    - Services communicate only through defined APIs
    - No direct database access between services
    - Use message queues for async communication
    
  quality_standards:
    - All code changes require review
    - Maintain >80% test coverage
    - Security scanning on all deployments
    - Documentation for all public APIs