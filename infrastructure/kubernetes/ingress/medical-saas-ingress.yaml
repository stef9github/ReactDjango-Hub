apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: medical-saas-ingress
  namespace: hub-namespace
  labels:
    app: medical-saas
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://hub.stephanerichard.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    # Security headers for medical compliance
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self';" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    # Rate limiting for security
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - hub.stephanerichard.com
    - api.hub.stephanerichard.com
    - auth.hub.stephanerichard.com
    secretName: medical-saas-tls
  rules:
  - host: hub.stephanerichard.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8000
      - path: /auth
        pathType: Prefix
        backend:
          service:
            name: identity-service
            port:
              number: 8001
  - host: api.hub.stephanerichard.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8000
  - host: auth.hub.stephanerichard.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: identity-service
            port:
              number: 8001
---
# Certificate for TLS
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: medical-saas-cert
  namespace: hub-namespace
spec:
  secretName: medical-saas-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: hub.stephanerichard.com
  dnsNames:
  - hub.stephanerichard.com
  - api.hub.stephanerichard.com
  - auth.hub.stephanerichard.com
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: medical-saas-network-policy
  namespace: hub-namespace
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: hub-namespace
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  - {}  # Allow all egress traffic
---
# NGINX Configuration for medical compliance
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-medical-config
  namespace: hub-namespace
  labels:
    app: medical-saas
    component: nginx-config
data:
  nginx.conf: |
    # Medical SaaS NGINX Configuration
    # Optimized for HIPAA compliance and security
    
    upstream backend_service {
        server backend-service:8000;
        keepalive 16;
    }
    
    upstream identity_service {
        server identity-service:8001;
        keepalive 16;
    }
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
    
    server {
        listen 80;
        server_name hub.stephanerichard.com;
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name hub.stephanerichard.com;
        
        # SSL Configuration
        ssl_certificate /etc/ssl/certs/medical-saas.crt;
        ssl_certificate_key /etc/ssl/private/medical-saas.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # API Routes with rate limiting
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Auth Routes with stricter rate limiting
        location /auth/ {
            limit_req zone=auth_limit burst=10 nodelay;
            proxy_pass http://identity_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Frontend static files
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }