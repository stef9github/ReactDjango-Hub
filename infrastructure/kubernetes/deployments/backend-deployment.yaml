apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-service
  namespace: hub-namespace
  labels:
    app: backend-service
    component: api
    version: v1.0
    compliance: hipaa-ready
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: backend-service
  template:
    metadata:
      labels:
        app: backend-service
        component: api
        version: v1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/api/metrics"
    spec:
      serviceAccountName: backend-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: django-migrations
        image: ghcr.io/stephanerichard/reactdjango-hub/backend:latest
        command: ['python', 'manage.py', 'migrate']
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: backend-service-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: backend-service-secrets
              key: redis-url
        envFrom:
        - configMapRef:
            name: backend-service-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      containers:
      - name: backend-service
        image: ghcr.io/stephanerichard/reactdjango-hub/backend:latest
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "8000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: backend-service-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: backend-service-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: backend-service-secrets
              key: django-secret-key
        - name: IDENTITY_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: backend-service-config
              key: identity-service-url
        - name: ENVIRONMENT
          value: "production"
        - name: DEBUG
          value: "False"
        - name: LOG_LEVEL
          value: "INFO"
        envFrom:
        - configMapRef:
            name: backend-service-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: media
          mountPath: /app/media
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: media
        persistentVolumeClaim:
          claimName: backend-media-pvc
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "medical-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backend-service
              topologyKey: kubernetes.io/hostname
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-service-pdb
  namespace: hub-namespace
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: backend-service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-service-sa
  namespace: hub-namespace
  labels:
    app: backend-service
    component: api
automountServiceAccountToken: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-media-pvc
  namespace: hub-namespace
  labels:
    app: backend-service
    component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2-encrypted