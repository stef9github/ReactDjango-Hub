# Medical SaaS Secret Templates - Production Ready
# NOTE: These are templates with placeholder values. 
# In production, use external secret management like AWS Secrets Manager or HashiCorp Vault

apiVersion: v1
kind: Secret
metadata:
  name: identity-service-secrets
  namespace: hub-namespace
  labels:
    app: identity-service
    component: authentication
    compliance: hipaa-ready
  annotations:
    secret-manager: "aws-secrets-manager"
    rotation-policy: "30-days"
type: Opaque
stringData:
  # Database connection (use AWS RDS endpoint from Terraform output)
  database-url: "postgresql://identity_user:CHANGE_THIS_PASSWORD@rds-endpoint:5432/identity_db?sslmode=require"
  
  # Redis connection (use AWS ElastiCache endpoint from Terraform output)
  redis-url: "redis://elasticache-endpoint:6379/0"
  
  # JWT signing key (generate strong key in production)
  jwt-secret-key: "CHANGE_THIS_JWT_SECRET_KEY_IN_PRODUCTION_32_CHARS_MIN"
  
  # OAuth secrets (configure with actual providers)
  github-client-secret: "GITHUB_OAUTH_CLIENT_SECRET"
  google-client-secret: "GOOGLE_OAUTH_CLIENT_SECRET"
  
  # Email service credentials
  smtp-password: "SMTP_SERVICE_PASSWORD"
  
  # Encryption key for sensitive data
  encryption-key: "CHANGE_THIS_ENCRYPTION_KEY_32_BYTES_MINIMUM_LENGTH"
  
  # API keys for external services
  twilio-auth-token: "TWILIO_AUTH_TOKEN_FOR_SMS_MFA"
  sendgrid-api-key: "SENDGRID_API_KEY_FOR_EMAILS"
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-service-secrets
  namespace: hub-namespace
  labels:
    app: backend-service
    component: api
    compliance: hipaa-ready
  annotations:
    secret-manager: "aws-secrets-manager"
    rotation-policy: "30-days"
type: Opaque
stringData:
  # Database connection (use AWS RDS endpoint from Terraform output)
  database-url: "postgresql://backend_user:CHANGE_THIS_PASSWORD@rds-endpoint:5432/medical_saas?sslmode=require"
  
  # Redis connection for caching and sessions
  redis-url: "redis://elasticache-endpoint:6379/1"
  
  # Django secret key (generate strong key in production)
  django-secret-key: "CHANGE_THIS_DJANGO_SECRET_KEY_IN_PRODUCTION_50_CHARS_MIN"
  
  # Identity service authentication
  identity-service-api-key: "IDENTITY_SERVICE_API_KEY_FOR_BACKEND_AUTH"
  
  # AWS S3 credentials for file storage
  aws-access-key-id: "AWS_ACCESS_KEY_ID"
  aws-secret-access-key: "AWS_SECRET_ACCESS_KEY"
  s3-bucket-name: "medical-saas-documents-production"
  
  # External API keys
  stripe-secret-key: "STRIPE_SECRET_KEY_FOR_PAYMENTS"
  twilio-account-sid: "TWILIO_ACCOUNT_SID"
  twilio-auth-token: "TWILIO_AUTH_TOKEN"
  
  # Encryption keys for PHI (Protected Health Information)
  phi-encryption-key: "PHI_ENCRYPTION_KEY_32_BYTES_FOR_HIPAA_COMPLIANCE"
  
  # Monitoring and logging
  sentry-dsn: "SENTRY_DSN_FOR_ERROR_TRACKING"
---
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: hub-namespace
  labels:
    component: database
    compliance: hipaa-ready
  annotations:
    secret-manager: "aws-secrets-manager"
    rotation-policy: "90-days"
type: Opaque
stringData:
  # Master database credentials
  postgres-username: "medical_admin"
  postgres-password: "CHANGE_THIS_MASTER_PASSWORD_IN_PRODUCTION"
  
  # Application database users
  identity-user: "identity_service"
  identity-password: "CHANGE_THIS_IDENTITY_PASSWORD"
  backend-user: "backend_service"
  backend-password: "CHANGE_THIS_BACKEND_PASSWORD"
  
  # Read-only user for analytics
  readonly-user: "analytics_readonly"
  readonly-password: "CHANGE_THIS_READONLY_PASSWORD"
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: hub-namespace
  labels:
    component: tls
    compliance: hipaa-ready
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
    cert-manager.io/auto-renew: "true"
type: kubernetes.io/tls
data:
  # TLS certificate and key (managed by cert-manager)
  tls.crt: LS0tLS1CRUdJTi... # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # Base64 encoded private key
---
# External Secret for AWS Secrets Manager integration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager-store
  namespace: hub-namespace
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: identity-service-external-secret
  namespace: hub-namespace
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  target:
    name: identity-service-secrets
    creationPolicy: Owner
  data:
  - secretKey: database-url
    remoteRef:
      key: medical-saas/identity-service
      property: database_url
  - secretKey: redis-url
    remoteRef:
      key: medical-saas/identity-service
      property: redis_url
  - secretKey: jwt-secret-key
    remoteRef:
      key: medical-saas/identity-service
      property: jwt_secret_key
---
# Service Account for External Secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: hub-namespace
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/external-secrets-role
---
# RBAC for External Secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: hub-namespace
  name: external-secrets-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: external-secrets-binding
  namespace: hub-namespace
subjects:
- kind: ServiceAccount
  name: external-secrets-sa
  namespace: hub-namespace
roleRef:
  kind: Role
  name: external-secrets-role
  apiGroup: rbac.authorization.k8s.io