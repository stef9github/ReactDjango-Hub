#!/bin/bash

# Création du projet ReactDjango Hub Medical
echo "🚀 Création du projet ReactDjango Hub Medical..."

# Create .gitignore
cat > .gitignore << 'ENDFILE'
Python
pycache/
*.py[cod]
*.sqlite3
.env
venv/
ENV/
.pytest_cache/
.coverage
htmlcov/
Node
node_modules/
npm-debug.log*
frontend/dist/
frontend/build/
.eslintcache
IDE
.vscode/
.idea/
*.swp
.DS_Store
Docker
docker-compose.override.yml
Security
*.pem
*.key
secrets/
ENDFILE
# Create .env.example
cat > .env.example << 'ENDFILE'
Django
SECRET_KEY=your-secret-key-change-in-production
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1
Database
DATABASE_URL=postgresql://postgres:postgres@db:5432/reactdjango_hub
Redis
REDIS_URL=redis://redis:6379/0
Frontend
VITE_API_URL=http://localhost:8000
VITE_GRAPHQL_URL=http://localhost:8000/graphql
ENDFILE
# Create docker-compose.yml
cat > docker-compose.yml << 'ENDFILE'
version: '3.8'
services:
db:
image: postgres:15-alpine
environment:
POSTGRES_DB: reactdjango_hub
POSTGRES_USER: postgres
POSTGRES_PASSWORD: postgres
volumes:
- postgres_data:/var/lib/postgresql/data
ports:
- "5432:5432"
redis:
image: redis:7-alpine
ports:
- "6379:6379"
backend:
build:
context: ./backend
dockerfile: Dockerfile.dev
command: python manage.py runserver 0.0.0.0:8000
volumes:
- ./backend:/app
ports:
- "8000:8000"
environment:
- DATABASE_URL=postgresql://postgres:postgres@db:5432/reactdjango_hub
- REDIS_URL=redis://redis:6379/0
- DEBUG=True
- SECRET_KEY=dev-secret-key
depends_on:
- db
- redis
frontend:
build:
context: ./frontend
dockerfile: Dockerfile.dev
command: npm run dev
volumes:
- ./frontend:/app
- /app/node_modules
ports:
- "5173:5173"
environment:
- VITE_API_URL=http://localhost:8000
depends_on:
- backend
volumes:
postgres_data:
ENDFILE
Makefile
cat > Makefile << 'ENDFILE'
.PHONY: help dev stop test migrate shell clean
help:
@echo "ReactDjango Hub - Available commands:"
@echo "  make dev          - Start development environment"
@echo "  make stop         - Stop all services"
@echo "  make test         - Run all tests"
@echo "  make migrate      - Run database migrations"
@echo "  make shell        - Open Django shell"
@echo "  make clean        - Clean up containers"
dev:
docker-compose up -d
@echo "✅ Development started at http://localhost:5173"
stop:
docker-compose down
test:
docker-compose run --rm backend pytest
docker-compose run --rm frontend npm test
migrate:
docker-compose run --rm backend python manage.py migrate
shell:
docker-compose run --rm backend python manage.py shell
clean:
docker-compose down -v
ENDFILE
==================== BACKEND ====================
backend/requirements.txt
cat > backend/requirements.txt << 'ENDFILE'
Django==5.0.1
django-environ==0.11.2
django-cors-headers==4.3.1
graphene-django==3.2.0
django-graphql-jwt==0.4.0
psycopg2-binary==2.9.9
django-redis==5.4.0
redis==5.0.1
djangorestframework==3.14.0
django-encrypted-model-fields==0.6.5
cryptography==41.0.7
celery==5.3.4
Pillow==10.2.0
pytest==7.4.4
pytest-django==4.7.0
pytest-cov==4.1.0
factory-boy==3.3.0
ENDFILE
backend/Dockerfile.dev
cat > backend/Dockerfile.dev << 'ENDFILE'
FROM python:3.11-slim
WORKDIR /app
RUN apt-get update && apt-get install -y 
gcc 
postgresql-client 
&& rm -rf /var/lib/apt/lists/*
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
ENDFILE
backend/manage.py
cat > backend/manage.py << 'ENDFILE'
#!/usr/bin/env python
import os
import sys
if name == 'main':
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
try:
from django.core.management import execute_from_command_line
except ImportError as exc:
raise ImportError(
"Couldn't import Django. Are you sure it's installed?"
) from exc
execute_from_command_line(sys.argv)
ENDFILE
chmod +x backend/manage.py
backend/config/init.py
touch backend/config/init.py
touch backend/config/settings/init.py
backend/config/settings/base.py
cat > backend/config/settings/base.py << 'ENDFILE'
from pathlib import Path
import environ
import os
BASE_DIR = Path(file).resolve().parent.parent.parent
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR.parent, '.env'))
SECRET_KEY = env('SECRET_KEY', default='change-me-in-production')
DEBUG = env.bool('DEBUG', default=False)
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost'])
INSTALLED_APPS = [
'django.contrib.admin',
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.messages',
'django.contrib.staticfiles',
# Third party
'corsheaders',
'rest_framework',
'graphene_django',

# Local apps
'apps.core',
'apps.clinical',
'apps.billing',
'apps.compliance',
'apps.analytics',
]
MIDDLEWARE = [
'django.middleware.security.SecurityMiddleware',
'corsheaders.middleware.CorsMiddleware',
'django.contrib.sessions.middleware.SessionMiddleware',
'django.middleware.common.CommonMiddleware',
'django.middleware.csrf.CsrfViewMiddleware',
'django.contrib.auth.middleware.AuthenticationMiddleware',
'django.contrib.messages.middleware.MessageMiddleware',
'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'config.urls'
TEMPLATES = [
{
'BACKEND': 'django.template.backends.django.DjangoTemplates',
'DIRS': [BASE_DIR / 'templates'],
'APP_DIRS': True,
'OPTIONS': {
'context_processors': [
'django.template.context_processors.debug',
'django.template.context_processors.request',
'django.contrib.auth.context_processors.auth',
'django.contrib.messages.context_processors.messages',
],
},
},
]
WSGI_APPLICATION = 'config.wsgi.application'
DATABASES = {
'default': env.db('DATABASE_URL', default='postgresql://postgres:postgres@localhost:5432/reactdjango_hub')
}
AUTH_PASSWORD_VALIDATORS = [
{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
{'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
]
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=['http://localhost:5173'])
GRAPHENE = {
'SCHEMA': 'config.schema.schema'
}
ENDFILE
backend/config/settings/development.py
cat > backend/config/settings/development.py << 'ENDFILE'
from .base import *
DEBUG = True
CORS_ALLOW_ALL_ORIGINS = True
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
ENDFILE
backend/config/urls.py
cat > backend/config/urls.py << 'ENDFILE'
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from graphene_django.views import GraphQLView
urlpatterns = [
path('admin/', admin.site.urls),
path('graphql/', GraphQLView.as_view(graphiql=True)),
]
if settings.DEBUG:
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
ENDFILE
backend/config/wsgi.py
cat > backend/config/wsgi.py << 'ENDFILE'
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.production')
application = get_wsgi_application()
ENDFILE
backend/config/schema.py
cat > backend/config/schema.py << 'ENDFILE'
import graphene
class Query(graphene.ObjectType):
hello = graphene.String()
def resolve_hello(self, info):
    return "Hello from ReactDjango Hub Medical!"
class Mutation(graphene.ObjectType):
pass
schema = graphene.Schema(query=Query, mutation=Mutation)
ENDFILE
Créer les apps Django
for app in core clinical billing compliance analytics; do
touch backend/apps/$app/init.py
cat > backend/apps/$app/models.py << 'ENDFILE'
from django.db import models
import uuid
class BaseModel(models.Model):
id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
created_at = models.DateTimeField(auto_now_add=True)
updated_at = models.DateTimeField(auto_now=True)
class Meta:
    abstract = True
ENDFILE
cat > backend/apps/$app/apps.py << ENDFILE
from django.apps import AppConfig
class ${app^}Config(AppConfig):
default_auto_field = 'django.db.models.BigAutoField'
name = 'apps.$app'
ENDFILE
touch backend/apps/$app/admin.py
touch backend/apps/$app/views.py
done
==================== FRONTEND ====================
frontend/package.json
cat > frontend/package.json << 'ENDFILE'
{
"name": "reactdjango-hub-frontend",
"version": "1.0.0",
"private": true,
"type": "module",
"scripts": {
"dev": "vite",
"build": "tsc && vite build",
"preview": "vite preview",
"test": "vitest",
"lint": "eslint . --ext ts,tsx"
},
"dependencies": {
"react": "^18.2.0",
"react-dom": "^18.2.0",
"react-router-dom": "^6.21.1",
"@tanstack/react-query": "^5.17.9",
"@apollo/client": "^3.8.8",
"graphql": "^16.8.1",
"axios": "^1.6.5",
"zustand": "^4.4.7",
"react-hook-form": "^7.48.2",
"zod": "^3.22.4",
"clsx": "^2.1.0"
},
"devDependencies": {
"@types/react": "^18.2.47",
"@types/react-dom": "^18.2.18",
"@vitejs/plugin-react": "^4.2.1",
"autoprefixer": "^10.4.16",
"postcss": "^8.4.33",
"tailwindcss": "^3.4.1",
"typescript": "^5.3.3",
"vite": "^5.0.11",
"vitest": "^1.2.0"
}
}
ENDFILE
frontend/Dockerfile.dev
cat > frontend/Dockerfile.dev << 'ENDFILE'
FROM node:20-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
ENDFILE
frontend/index.html
cat > frontend/index.html << 'ENDFILE'
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ReactDjango Hub Medical</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
ENDFILE
frontend/vite.config.ts
cat > frontend/vite.config.ts << 'ENDFILE'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
export default defineConfig({
plugins: [react()],
server: {
port: 5173,
host: true,
watch: {
usePolling: true,
}
}
})
ENDFILE
frontend/tsconfig.json
cat > frontend/tsconfig.json << 'ENDFILE'
{
"compilerOptions": {
"target": "ES2020",
"useDefineForClassFields": true,
"lib": ["ES2020", "DOM", "DOM.Iterable"],
"module": "ESNext",
"skipLibCheck": true,
"moduleResolution": "bundler",
"allowImportingTsExtensions": true,
"resolveJsonModule": true,
"isolatedModules": true,
"noEmit": true,
"jsx": "react-jsx",
"strict": true,
"baseUrl": ".",
"paths": {
"@/": ["src/"]
}
},
"include": ["src"],
"references": [{ "path": "./tsconfig.node.json" }]
}
ENDFILE
frontend/tsconfig.node.json
cat > frontend/tsconfig.node.json << 'ENDFILE'
{
"compilerOptions": {
"composite": true,
"skipLibCheck": true,
"module": "ESNext",
"moduleResolution": "bundler",
"allowSyntheticDefaultImports": true
},
"include": ["vite.config.ts"]
}
ENDFILE
frontend/tailwind.config.js
cat > frontend/tailwind.config.js << 'ENDFILE'
export default {
content: [
"./index.html",
"./src/**/*.{js,ts,jsx,tsx}",
],
theme: {
extend: {
colors: {
primary: {
50: '#eff6ff',
500: '#3b82f6',
600: '#2563eb',
}
}
},
},
plugins: [],
}
ENDFILE
frontend/postcss.config.js
cat > frontend/postcss.config.js << 'ENDFILE'
export default {
plugins: {
tailwindcss: {},
autoprefixer: {},
},
}
ENDFILE
frontend/src/main.tsx
cat > frontend/src/main.tsx << 'ENDFILE'
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
ReactDOM.createRoot(document.getElementById('root')!).render(
<React.StrictMode>
<App />
</React.StrictMode>,
)
ENDFILE
frontend/src/App.tsx
cat > frontend/src/App.tsx << 'ENDFILE'
import { BrowserRouter, Routes, Route } from 'react-router-dom'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'
import HomePage from './pages/HomePage'
const queryClient = new QueryClient()
const apolloClient = new ApolloClient({
uri: import.meta.env.VITE_GRAPHQL_URL || 'http://localhost:8000/graphql',
cache: new InMemoryCache(),
})
function App() {
return (
<ApolloProvider client={apolloClient}>
<QueryClientProvider client={queryClient}>
<BrowserRouter>
<Routes>
<Route path="/" element={<HomePage />} />
</Routes>
</BrowserRouter>
</QueryClientProvider>
</ApolloProvider>
)
}
export default App
ENDFILE
frontend/src/pages/HomePage.tsx
cat > frontend/src/pages/HomePage.tsx << 'ENDFILE'
export default function HomePage() {
return (
<div className="min-h-screen bg-gray-50">
<div className="max-w-7xl mx-auto px-4 py-12">
<h1 className="text-4xl font-bold text-center mb-8">
🏥 ReactDjango Hub Medical
</h1>
<div className="bg-white rounded-lg shadow-md p-8 max-w-md mx-auto">
<h2 className="text-2xl font-semibold mb-4">Welcome!</h2>
<p className="text-gray-600">Your medical SaaS platform is ready.</p>
</div>
</div>
</div>
)
}
ENDFILE
frontend/src/index.css
cat > frontend/src/index.css << 'ENDFILE'
@tailwind base;
@tailwind components;
@tailwind utilities;
ENDFILE
frontend/src/vite-env.d.ts
cat > frontend/src/vite-env.d.ts << 'ENDFILE'
/// <reference types="vite/client" />
ENDFILE
==================== CI/CD ====================
.github/workflows/ci.yml
cat > .github/workflows/ci.yml << 'ENDFILE'
name: CI
on:
push:
branches: [ main, develop ]
pull_request:
branches: [ main ]
jobs:
test:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v3
- name: Run tests
run: echo "Tests would run here"
ENDFILE